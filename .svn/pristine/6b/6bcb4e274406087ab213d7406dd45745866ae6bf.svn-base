/*     * Copyright (c) 2014 Samsung Electronics Co., Ltd.    * All rights reserved.    *    * Redistribution and use in source and binary forms, with or without    * modification, are permitted provided that the following conditions are    * met:    *    *     * Redistributions of source code must retain the above copyright    *        notice, this list of conditions and the following disclaimer.   *     * Redistributions in binary form must reproduce the above   *       copyright notice, this list of conditions and the following disclaimer   *       in the documentation and/or other materials provided with the   *       distribution.   *     * Neither the name of Samsung Electronics Co., Ltd. nor the names of its   *       contributors may be used to endorse or promote products derived from   *       this software without specific prior written permission.   *   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS   * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR   * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT   * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,   * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,   * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY   * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT   * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package com.smesh.main;import java.io.ByteArrayInputStream;import java.io.IOException;import java.security.cert.CertificateException;import java.security.cert.CertificateFactory;import java.util.HashMap;import javax.security.cert.X509Certificate;import android.content.Context;import android.content.Intent;import android.content.pm.PackageInfo;import android.content.pm.PackageManager;import android.content.pm.Signature;import android.content.pm.PackageManager.NameNotFoundException;import android.os.Binder;import android.os.IBinder;import android.util.Log;import android.widget.Toast;import com.samsung.android.sdk.SsdkUnsupportedException;import com.samsung.android.sdk.accessory.SA;import com.samsung.android.sdk.accessory.SAAgent;import com.samsung.android.sdk.accessory.SAAuthenticationToken;import com.samsung.android.sdk.accessory.SAPeerAgent;import com.samsung.android.sdk.accessory.SASocket;import com.smesh.helper.MyApplication;import com.smesh.helper.SmeshPreference;public class AccessoryProviderService extends SAAgent{	public static final String TAG = "AccessoryProviderService";		public Boolean isAuthentication = false;	public Context mContext = null;	public static final int SERVICE_CONNECTION_RESULT_OK = 0;	public static final int ACCESSORY_CHANNEL_ID = 117;	 HashMap<Integer, HelloAccessoryProviderConnection> mConnectionsMap = null;	private int authCount = 1;	public HelloAccessoryProviderConnection mMyConnection;		private final IBinder m_binder = new LocalIBinder();	private SmeshPreference pref;	private MyApplication myApp;		public class LocalBinder extends Binder {		public AccessoryProviderService getService() {			return AccessoryProviderService.this;		}	}	public AccessoryProviderService() {		super(TAG, HelloAccessoryProviderConnection.class);	}	public  class HelloAccessoryProviderConnection extends SASocket {		private  int mConnectionId;		public HelloAccessoryProviderConnection() {			super(HelloAccessoryProviderConnection.class.getName());		}		@Override		public void onError(int channelId, String errorString, int error) {		}		@Override		public void onReceive(int channelId, byte[] data) {        				String StrData = new String(data);			String Hrm;									if(StrData.charAt(0) == 'H') {				Hrm = StrData.substring(1);				myApp.set_HRM(Integer.parseInt(Hrm));				Log.e(TAG,"HRM : " + Hrm);			}					}		public  void onSend (String a_message) { 						final String message = a_message;						final HelloAccessoryProviderConnection uHandler = mConnectionsMap.get(Integer					.parseInt(String.valueOf(mConnectionId)));						if(uHandler == null){				return;			}			new Thread(new Runnable() {				public void run() {									try {						uHandler.send(ACCESSORY_CHANNEL_ID, message.getBytes());						Log.e(TAG, "SEND::" + message);					} catch (IOException e) {						e.printStackTrace();					}				}			}).start();		}		@Override		protected void onServiceConnectionLost(int errorCode) {			if (mConnectionsMap != null) {				mConnectionsMap.remove(mConnectionId);			}			Log.e("TAG", "Gear 해제");			myApp.set_gear(false);		}	}		public void sendMsg(String msg) {		if (mMyConnection!=null)			mMyConnection.onSend(msg);	}	    @Override    public void onCreate() {        super.onCreate();                SA mAccessory = new SA();                pref = new SmeshPreference(this);        myApp = new MyApplication();        try {        	mAccessory.initialize(this);        } catch (SsdkUnsupportedException e) {        	// Error Handling        } catch (Exception e1) {            e1.printStackTrace();            stopSelf();        }    }	        @Override     protected void onServiceConnectionRequested(SAPeerAgent peerAgent) {    		    	isAuthentication = false;    	Log.e(TAG,"isAuthentication");    	if(isAuthentication) {           // Toast.makeText(getBaseContext(), "Disconnect Gear", Toast.LENGTH_SHORT).show();            authenticatePeerAgent(peerAgent);        }    	else {            Toast.makeText(getApplicationContext(), "Connect Gear", Toast.LENGTH_SHORT).show();            acceptServiceConnectionRequest(peerAgent);        }    		    }         protected void onAuthenticationResponse(SAPeerAgent uPeerAgent,    		SAAuthenticationToken authToken, int error) {				if (authToken.getAuthenticationType() == SAAuthenticationToken.AUTHENTICATION_TYPE_CERTIFICATE_X509) {			mContext = getApplicationContext();			byte[] myAppKey = getApplicationCertificate(mContext);					if (authToken.getKey() != null) {				boolean matched = true;				if(authToken.getKey().length != myAppKey.length){					matched = false;				}else{					for(int i=0; i<authToken.getKey().length; i++){						if(authToken.getKey()[i]!=myAppKey[i]){							matched = false;						}					}				}								if (matched) {					acceptServiceConnectionRequest(uPeerAgent);				}							}		} else if (authToken.getAuthenticationType() == SAAuthenticationToken.AUTHENTICATION_TYPE_NONE) 			Log.e(TAG, "onAuthenticationResponse : CERT_TYPE(NONE)");			}	 	private  byte[] getApplicationCertificate(Context context) {		if(context == null) {			return null;		}		Signature[] sigs;		byte[] certificat = null;		String packageName = context.getPackageName();		if (context != null) {			try {				PackageInfo pkgInfo = null;				pkgInfo = context.getPackageManager().getPackageInfo(						packageName, PackageManager.GET_SIGNATURES);				if (pkgInfo == null) {					return null;				}				sigs = pkgInfo.signatures;				if (sigs == null) {				} else {					CertificateFactory cf = CertificateFactory							.getInstance("X.509");					ByteArrayInputStream stream = new ByteArrayInputStream(							sigs[0].toByteArray());					X509Certificate cert;					cert = X509Certificate.getInstance(stream);					certificat = cert.getPublicKey().getEncoded();				}			} catch (NameNotFoundException e) {				e.printStackTrace();			} catch (CertificateException e) {				e.printStackTrace();			} catch (javax.security.cert.CertificateException e) {				e.printStackTrace();			}		}		return certificat;	}    	@Override	protected void onFindPeerAgentResponse(SAPeerAgent arg0, int arg1) {		// TODO Auto-generated method stub	}	@Override	protected void onServiceConnectionResponse(SAPeerAgent peerAgent, SASocket thisConnection,			int result) {    			String currentGPS;    			if (result == CONNECTION_SUCCESS) {						Log.e(TAG, "Connect Success");			myApp.set_gear(true);						if (thisConnection != null) {				mMyConnection = (HelloAccessoryProviderConnection) thisConnection;				if (mConnectionsMap == null) {					mConnectionsMap = new HashMap<Integer, HelloAccessoryProviderConnection>();				}				mMyConnection.mConnectionId = (int) (System.currentTimeMillis() & 255);				mConnectionsMap.put(mMyConnection.mConnectionId, mMyConnection);									            //Send Gear Current GPS	            currentGPS = pref.getValue("gps", "알수없음");	            mMyConnection.onSend("G" + currentGPS);	            	            //Send Gear Strart HRM	            mMyConnection.onSend("H");			} 		}		else if (result == CONNECTION_ALREADY_EXIST) {			Log.e(TAG, "onServiceConnectionResponse, CONNECTION_ALREADY_EXIST");		}	}	@Override	public IBinder onBind(Intent arg0) {		return m_binder;	}		public class LocalIBinder extends Binder{		AccessoryProviderService getService(){			return AccessoryProviderService.this;		}	}}